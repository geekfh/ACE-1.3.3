/*! ColVis 1.1.1
 * Â©2010-2014 SpryMedia Ltd - datatables.net/license
 */
/**
 * @summary     ColVis
 * @description Controls for column visibility in DataTables
 * @version     1.1.1
 * @file        dataTables.colReorder.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2010-2014 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
!function(a,b,c){var d=function(a,d){"use strict";/**
 * ColVis provides column visibility control for DataTables
 *
 * @class ColVis
 * @constructor
 * @param {object} DataTables settings object. With DataTables 1.10 this can
 *   also be and API instance, table node, jQuery collection or jQuery selector.
 * @param {object} ColVis configuration options
 */
var e=function(b,c){/* Santiy check that we are a new instance */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public class variables
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
	 * @namespace Settings object which contains customisable information for
	 *     ColVis instance. Augmented by ColVis.defaults
	 */
/**
	 * @namespace Common and useful DOM elements for the class instance
	 */
/* Store global reference */
/* Constructor logic */
return this.CLASS&&"ColVis"==this.CLASS||alert("Warning: ColVis must be initialised with the keyword 'new'"),"undefined"==typeof c&&(c={}),a.fn.dataTable.camelToHungarian&&a.fn.dataTable.camelToHungarian(e.defaults,c),this.s={/**
		 * DataTables settings object
		 *  @property dt
		 *  @type     Object
		 *  @default  null
		 */
dt:null,/**
		 * Customisation object
		 *  @property oInit
		 *  @type     Object
		 *  @default  passed in
		 */
oInit:c,/**
		 * Flag to say if the collection is hidden
		 *  @property hidden
		 *  @type     boolean
		 *  @default  true
		 */
hidden:!0,/**
		 * Store the original visibility settings so they could be restored
		 *  @property abOriginal
		 *  @type     Array
		 *  @default  []
		 */
abOriginal:[]},this.dom={/**
		 * Wrapper for the button - given back to DataTables as the node to insert
		 *  @property wrapper
		 *  @type     Node
		 *  @default  null
		 */
wrapper:null,/**
		 * Activation button
		 *  @property button
		 *  @type     Node
		 *  @default  null
		 */
button:null,/**
		 * Collection list node
		 *  @property collection
		 *  @type     Node
		 *  @default  null
		 */
collection:null,/**
		 * Background node used for shading the display and event capturing
		 *  @property background
		 *  @type     Node
		 *  @default  null
		 */
background:null,/**
		 * Element to position over the activation button to catch mouse events when using mouseover
		 *  @property catcher
		 *  @type     Node
		 *  @default  null
		 */
catcher:null,/**
		 * List of button elements
		 *  @property buttons
		 *  @type     Array
		 *  @default  []
		 */
buttons:[],/**
		 * List of group button elements
		 *  @property groupButtons
		 *  @type     Array
		 *  @default  []
		 */
groupButtons:[],/**
		 * Restore button
		 *  @property restore
		 *  @type     Node
		 *  @default  null
		 */
restore:null},e.aInstances.push(this),this.s.dt=a.fn.dataTable.Api?new a.fn.dataTable.Api(b).settings()[0]:b,this._fnConstruct(c),this};/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Static object methods
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Rebuild the collection for a given table, or all tables if no parameter given
 *  @method  ColVis.fnRebuild
 *  @static
 *  @param   object oTable DataTable instance to consider - optional
 *  @returns void
 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Static object properties
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Collection of all ColVis instances
 *  @property ColVis.aInstances
 *  @static
 *  @type     Array
 *  @default  []
 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Constants
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Name of this class
 *  @constant CLASS
 *  @type     String
 *  @default  ColVis
 */
/**
 * ColVis version
 *  @constant  VERSION
 *  @type      String
 *  @default   See code
 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Initialisation
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*
 * Register a new feature with DataTables
 */
// Make ColVis accessible from the DataTables instance
return e.prototype={/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public methods
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
	 * Get the ColVis instance's control button so it can be injected into the
	 * DOM
	 *  @method  button
	 *  @returns {node} ColVis button
	 */
button:function(){return this.dom.wrapper},/**
	 * Alias of `rebuild` for backwards compatibility
	 *  @method  fnRebuild
	 */
fnRebuild:function(){this.rebuild()},/**
	 * Rebuild the list of buttons for this instance (i.e. if there is a column
	 * header update)
	 *  @method  fnRebuild
	 */
rebuild:function(){/* Remove the old buttons */
for(var a=this.dom.buttons.length-1;a>=0;a--)this.dom.collection.removeChild(this.dom.buttons[a]);this.dom.buttons.splice(0,this.dom.buttons.length),this.dom.restore&&this.dom.restore.parentNode(this.dom.restore),/* Re-add them (this is not the optimal way of doing this, it is fast and effective) */
this._fnAddGroups(),this._fnAddButtons(),/* Update the checkboxes */
this._fnDrawCallback()},/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods (they are of course public in JS, but recommended as private)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
	 * Constructor logic
	 *  @method  _fnConstruct
	 *  @returns void
	 *  @private
	 */
_fnConstruct:function(c){this._fnApplyCustomisation(c);var d,e,f=this;/* Store the original visibility information */
for(this.dom.wrapper=b.createElement("div"),this.dom.wrapper.className="ColVis",this.dom.button=a("<button />",{"class":this.s.dt.bJUI?"ColVis_Button ColVis_MasterButton ui-button ui-state-default":"ColVis_Button ColVis_MasterButton"}).append("<span>"+this.s.buttonText+"</span>").bind("mouseover"==this.s.activate?"mouseover":"click",function(a){a.preventDefault(),f._fnCollectionShow()}).appendTo(this.dom.wrapper)[0],this.dom.catcher=this._fnDomCatcher(),this.dom.collection=this._fnDomCollection(),this.dom.background=this._fnDomBackground(),this._fnAddGroups(),this._fnAddButtons(),d=0,e=this.s.dt.aoColumns.length;e>d;d++)this.s.abOriginal.push(this.s.dt.aoColumns[d].bVisible);/* Update on each draw */
this.s.dt.aoDrawCallback.push({fn:function(){f._fnDrawCallback.call(f)},sName:"ColVis"}),/* If columns are reordered, then we need to update our exclude list and
		 * rebuild the displayed list
		 */
a(this.s.dt.oInstance).bind("column-reorder",function(a,b,c){for(d=0,e=f.s.aiExclude.length;e>d;d++)f.s.aiExclude[d]=c.aiInvertMapping[f.s.aiExclude[d]];var g=f.s.abOriginal.splice(c.iFrom,1)[0];f.s.abOriginal.splice(c.iTo,0,g),f.fnRebuild()}),
// Set the initial state
this._fnDrawCallback()},/**
	 * Apply any customisation to the settings from the DataTables initialisation
	 *  @method  _fnApplyCustomisation
	 *  @returns void
	 *  @private
	 */
_fnApplyCustomisation:function(b){a.extend(!0,this.s,e.defaults,b),
// Slightly messy overlap for the camelCase notation
!this.s.showAll&&this.s.bShowAll&&(this.s.showAll=this.s.sShowAll),!this.s.restore&&this.s.bRestore&&(this.s.restore=this.s.sRestore);
// CamelCase to Hungarian for the column groups 
var c=this.s.groups,d=this.s.aoGroups;if(c)for(var f=0,g=c.length;g>f;f++)c[f].title&&(d[f].sTitle=c[f].title),c[f].columns&&(d[f].aiColumns=c[f].columns)},/**
	 * On each table draw, check the visibility checkboxes as needed. This allows any process to
	 * update the table's column visibility and ColVis will still be accurate.
	 *  @method  _fnDrawCallback
	 *  @returns void
	 *  @private
	 */
_fnDrawCallback:function(){for(var b,d=this.s.dt.aoColumns,e=this.dom.buttons,f=this.s.aoGroups,g=0,h=e.length;h>g;g++)b=e[g],b.__columnIdx!==c&&a("input",b).prop("checked",d[b.__columnIdx].bVisible);for(var i=function(a){for(var b=0,c=a.length;c>b;b++)if(d[a[b]].bVisible===!1)return!1;return!0},j=function(a){for(var b=0,c=a.length;c>b;b++)if(d[a[b]].bVisible===!0)return!1;return!0},k=0,l=f.length;l>k;k++)i(f[k].aiColumns)?(a("input",this.dom.groupButtons[k]).prop("checked",!0),a("input",this.dom.groupButtons[k]).prop("indeterminate",!1)):j(f[k].aiColumns)?(a("input",this.dom.groupButtons[k]).prop("checked",!1),a("input",this.dom.groupButtons[k]).prop("indeterminate",!1)):a("input",this.dom.groupButtons[k]).prop("indeterminate",!0)},/**
	 * Loop through the groups (provided in the settings) and create a button for each.
	 *  @method  _fnAddgroups
	 *  @returns void
	 *  @private
	 */
_fnAddGroups:function(){var a;if("undefined"!=typeof this.s.aoGroups)for(var b=0,c=this.s.aoGroups.length;c>b;b++)a=this._fnDomGroupButton(b),this.dom.groupButtons.push(a),this.dom.buttons.push(a),this.dom.collection.appendChild(a)},/**
	 * Loop through the columns in the table and as a new button for each one.
	 *  @method  _fnAddButtons
	 *  @returns void
	 *  @private
	 */
_fnAddButtons:function(){var b,c=this.s.dt.aoColumns;if(-1===a.inArray("all",this.s.aiExclude))for(var d=0,e=c.length;e>d;d++)-1===a.inArray(d,this.s.aiExclude)&&(b=this._fnDomColumnButton(d),b.__columnIdx=d,this.dom.buttons.push(b));"alpha"===this.s.order&&this.dom.buttons.sort(function(a,b){var d=c[a.__columnIdx].sTitle,e=c[b.__columnIdx].sTitle;return d===e?0:e>d?-1:1}),this.s.restore&&(b=this._fnDomRestoreButton(),b.className+=" ColVis_Restore",this.dom.buttons.push(b)),this.s.showAll&&(b=this._fnDomShowXButton(this.s.showAll,!0),b.className+=" ColVis_ShowAll",this.dom.buttons.push(b)),this.s.showNone&&(b=this._fnDomShowXButton(this.s.showNone,!1),b.className+=" ColVis_ShowNone",this.dom.buttons.push(b)),a(this.dom.collection).append(this.dom.buttons)},/**
	 * Create a button which allows a "restore" action
	 *  @method  _fnDomRestoreButton
	 *  @returns {Node} Created button
	 *  @private
	 */
_fnDomRestoreButton:function(){var b=this,c=this.s.dt;return a('<li class="ColVis_Special '+(c.bJUI?"ui-button ui-state-default":"")+'">'+this.s.restore+"</li>").click(function(a){for(var c=0,d=b.s.abOriginal.length;d>c;c++)b.s.dt.oInstance.fnSetColumnVis(c,b.s.abOriginal[c],!1);b._fnAdjustOpenRows(),b.s.dt.oInstance.fnAdjustColumnSizing(!1),b.s.dt.oInstance.fnDraw(!1)})[0]},/**
	 * Create a button which allows show all and show node actions
	 *  @method  _fnDomShowXButton
	 *  @returns {Node} Created button
	 *  @private
	 */
_fnDomShowXButton:function(b,c){var d=this,e=this.s.dt;return a('<li class="ColVis_Special '+(e.bJUI?"ui-button ui-state-default":"")+'">'+b+"</li>").click(function(a){for(var b=0,e=d.s.abOriginal.length;e>b;b++)-1===d.s.aiExclude.indexOf(b)&&d.s.dt.oInstance.fnSetColumnVis(b,c,!1);d._fnAdjustOpenRows(),d.s.dt.oInstance.fnAdjustColumnSizing(!1),d.s.dt.oInstance.fnDraw(!1)})[0]},/**
	 * Create the DOM for a show / hide group button
	 *  @method  _fnDomGroupButton
	 *  @param {int} i Group in question, order based on that provided in settings
	 *  @returns {Node} Created button
	 *  @private
	 */
_fnDomGroupButton:function(b){var c=this,d=this.s.dt,e=this.s.aoGroups[b];return a('<li class="ColVis_Special '+(d.bJUI?"ui-button ui-state-default":"")+'"><label><input type="checkbox" /><span>'+e.sTitle+"</span></label></li>").click(function(b){var d=!a("input",this).is(":checked");"li"!==b.target.nodeName.toLowerCase()&&(d=!d);for(var f=0;f<e.aiColumns.length;f++)c.s.dt.oInstance.fnSetColumnVis(e.aiColumns[f],d)})[0]},/**
	 * Create the DOM for a show / hide button
	 *  @method  _fnDomColumnButton
	 *  @param {int} i Column in question
	 *  @returns {Node} Created button
	 *  @private
	 */
_fnDomColumnButton:function(b){var c=this,d=this.s.dt.aoColumns[b],e=this.s.dt,f=null===this.s.fnLabel?d.sTitle:this.s.fnLabel(b,d.sTitle,d.nTh);return a("<li "+(e.bJUI?'class="ui-button ui-state-default"':"")+'><label><input type="checkbox" /><span>'+f+"</span></label></li>").click(function(d){var f=!a("input",this).is(":checked");"li"!==d.target.nodeName.toLowerCase()&&(f=!f);/* Need to consider the case where the initialiser created more than one table - change the
				 * API index that DataTables is using
				 */
var g=a.fn.dataTableExt.iApiIndex;a.fn.dataTableExt.iApiIndex=c._fnDataTablesApiIndex.call(c),
// Optimisation for server-side processing when scrolling - don't do a full redraw
e.oFeatures.bServerSide?(c.s.dt.oInstance.fnSetColumnVis(b,f,!1),c.s.dt.oInstance.fnAdjustColumnSizing(!1),(""!==e.oScroll.sX||""!==e.oScroll.sY)&&c.s.dt.oInstance.oApi._fnScrollDraw(c.s.dt),c._fnDrawCallback()):c.s.dt.oInstance.fnSetColumnVis(b,f),a.fn.dataTableExt.iApiIndex=g,/* Restore */
"input"===d.target.nodeName.toLowerCase()&&null!==c.s.fnStateChange&&c.s.fnStateChange.call(c,b,f)})[0]},/**
	 * Get the position in the DataTables instance array of the table for this
	 * instance of ColVis
	 *  @method  _fnDataTablesApiIndex
	 *  @returns {int} Index
	 *  @private
	 */
_fnDataTablesApiIndex:function(){for(var a=0,b=this.s.dt.oInstance.length;b>a;a++)if(this.s.dt.oInstance[a]==this.s.dt.nTable)return a;return 0},/**
	 * Create the element used to contain list the columns (it is shown and
	 * hidden as needed)
	 *  @method  _fnDomCollection
	 *  @returns {Node} div container for the collection
	 *  @private
	 */
_fnDomCollection:function(){return a("<ul />",{"class":this.s.dt.bJUI?"ColVis_collection ui-buttonset ui-buttonset-multi":"ColVis_collection"}).css({display:"none",opacity:0,position:this.s.bCssPosition?"":"absolute"})[0]},/**
	 * An element to be placed on top of the activate button to catch events
	 *  @method  _fnDomCatcher
	 *  @returns {Node} div container for the collection
	 *  @private
	 */
_fnDomCatcher:function(){var c=this,d=b.createElement("div");return d.className="ColVis_catcher",a(d).click(function(){c._fnCollectionHide.call(c,null,null)}),d},/**
	 * Create the element used to shade the background, and capture hide events (it is shown and
	 * hidden as needed)
	 *  @method  _fnDomBackground
	 *  @returns {Node} div container for the background
	 *  @private
	 */
_fnDomBackground:function(){var b=this,c=a("<div></div>").addClass("ColVis_collectionBackground").css("opacity",0).click(function(){b._fnCollectionHide.call(b,null,null)});/* When considering a mouse over action for the activation, we also consider a mouse out
		 * which is the same as a mouse over the background - without all the messing around of
		 * bubbling events. Use the catcher element to avoid messing around with bubbling
		 */
return"mouseover"==this.s.activate&&c.mouseover(function(){b.s.overcollection=!1,b._fnCollectionHide.call(b,null,null)}),c[0]},/**
	 * Show the show / hide list and the background
	 *  @method  _fnCollectionShow
	 *  @returns void
	 *  @private
	 */
_fnCollectionShow:function(){var c,d=this,e=a(this.dom.button).offset(),f=this.dom.collection,g=this.dom.background,h=parseInt(e.left,10),i=parseInt(e.top+a(this.dom.button).outerHeight(),10);this.s.bCssPosition||(f.style.top=i+"px",f.style.left=h+"px"),a(f).css({display:"block",opacity:0}),g.style.bottom="0px",g.style.right="0px";var j=this.dom.catcher.style;/* Visual corrections to try and keep the collection visible */
if(j.height=a(this.dom.button).outerHeight()+"px",j.width=a(this.dom.button).outerWidth()+"px",j.top=e.top+"px",j.left=h+"px",b.body.appendChild(g),b.body.appendChild(f),b.body.appendChild(this.dom.catcher),/* This results in a very small delay for the end user but it allows the animation to be
		 * much smoother. If you don't want the animation, then the setTimeout can be removed
		 */
a(f).animate({opacity:1},d.s.iOverlayFade),a(g).animate({opacity:.1},d.s.iOverlayFade,"linear",function(){/* In IE6 if you set the checked attribute of a hidden checkbox, then this is not visually
			 * reflected. As such, we need to do it here, once it is visible. Unbelievable.
			 */
a.browser&&a.browser.msie&&"6.0"==a.browser.version&&d._fnDrawCallback()}),!this.s.bCssPosition){c="left"==this.s.sAlign?h:h-a(f).outerWidth()+a(this.dom.button).outerWidth(),f.style.left=c+"px";var k=a(f).outerWidth(),l=(a(f).outerHeight(),a(b).width());c+k>l&&(f.style.left=l-k+"px")}this.s.hidden=!1},/**
	 * Hide the show / hide list and the background
	 *  @method  _fnCollectionHide
	 *  @returns void
	 *  @private
	 */
_fnCollectionHide:function(){var c=this;this.s.hidden||null===this.dom.collection||(this.s.hidden=!0,a(this.dom.collection).animate({opacity:0},c.s.iOverlayFade,function(a){this.style.display="none"}),a(this.dom.background).animate({opacity:0},c.s.iOverlayFade,function(a){b.body.removeChild(c.dom.background),b.body.removeChild(c.dom.catcher)}))},/**
	 * Alter the colspan on any fnOpen rows
	 */
_fnAdjustOpenRows:function(){for(var a=this.s.dt.aoOpenRows,b=this.s.dt.oApi._fnVisbleColumns(this.s.dt),c=0,d=a.length;d>c;c++)a[c].nTr.getElementsByTagName("td")[0].colSpan=b}},e.fnRebuild=function(a){var b=null;"undefined"!=typeof a&&(b=a.fnSettings().nTable);for(var c=0,d=e.aInstances.length;d>c;c++)("undefined"==typeof a||b==e.aInstances[c].s.dt.nTable)&&e.aInstances[c].fnRebuild()},e.defaults={/**
	 * Mode of activation. Can be 'click' or 'mouseover'
	 *  @property activate
	 *  @type     string
	 *  @default  click
	 */
active:"click",/**
	 * Text used for the button
	 *  @property buttonText
	 *  @type     string
	 *  @default  Show / hide columns
	 */
buttonText:"Show / hide columns",/**
	 * List of columns (integers) which should be excluded from the list
	 *  @property aiExclude
	 *  @type     array
	 *  @default  []
	 */
aiExclude:[],/**
	 * Show restore button
	 *  @property bRestore
	 *  @type     boolean
	 *  @default  false
	 */
bRestore:!1,/**
	 * Restore button text
	 *  @property sRestore
	 *  @type     string
	 *  @default  Restore original
	 */
sRestore:"Restore original",/**
	 * Show Show-All button
	 *  @property bShowAll
	 *  @type     boolean
	 *  @default  false
	 */
bShowAll:!1,/**
	 * Show All button text
	 *  @property sShowAll
	 *  @type     string
	 *  @default  Restore original
	 */
sShowAll:"Show All",/**
	 * Position of the collection menu when shown - align "left" or "right"
	 *  @property sAlign
	 *  @type     string
	 *  @default  left
	 */
sAlign:"left",/**
	 * Callback function to tell the user when the state has changed
	 *  @property fnStateChange
	 *  @type     function
	 *  @default  null
	 */
fnStateChange:null,/**
	 * Overlay animation duration in mS
	 *  @property iOverlayFade
	 *  @type     integer|false
	 *  @default  500
	 */
iOverlayFade:500,/**
	 * Label callback for column names. Takes three parameters: 1. the
	 * column index, 2. the column title detected by DataTables and 3. the
	 * TH node for the column
	 *  @property fnLabel
	 *  @type     function
	 *  @default  null
	 */
fnLabel:null,/**
	 * Indicate if the column list should be positioned by Javascript,
	 * visually below the button or allow CSS to do the positioning
	 *  @property bCssPosition
	 *  @type     boolean
	 *  @default  false
	 */
bCssPosition:!1,/**
	 * Group buttons
	 *  @property aoGroups
	 *  @type     array
	 *  @default  []
	 */
aoGroups:[],/**
	 * Button ordering - 'alpha' (alphabetical) or 'column' (table column
	 * order)
	 *  @property order
	 *  @type     string
	 *  @default  column
	 */
order:"column"},e.aInstances=[],e.prototype.CLASS="ColVis",e.VERSION="1.1.1",e.prototype.VERSION=e.VERSION,"function"==typeof a.fn.dataTable&&"function"==typeof a.fn.dataTableExt.fnVersionCheck&&a.fn.dataTableExt.fnVersionCheck("1.7.0")?a.fn.dataTableExt.aoFeatures.push({fnInit:function(a){var b=a.oInit,c=new e(a,b.colVis||b.oColVis||{});return c.button()},cFeature:"C",sFeature:"ColVis"}):alert("Warning: ColVis requires DataTables 1.7 or greater - www.datatables.net/download"),a.fn.dataTable.ColVis=e,a.fn.DataTable.ColVis=e,e};// /factory
// Define as an AMD module if possible
"function"==typeof define&&define.amd?define(["jquery","datatables"],d):"object"==typeof exports?
// Node/CommonJS
d(require("jquery"),require("datatables")):jQuery&&!jQuery.fn.dataTable.ColVis&&
// Otherwise simply initialise as normal, stopping multiple evaluation
d(jQuery,jQuery.fn.dataTable)}(window,document);