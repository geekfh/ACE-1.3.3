// Released under MIT license
// Copyright (c) 2009-2010 Dominic Baggott
// Copyright (c) 2009-2010 Ash Berlin
// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)
/*jshint browser:true, devel:true */
!function(b){
// For Spidermonkey based engines
function c(){return"Markdown.mk_block( "+uneval(this.toString())+", "+uneval(this.trailing)+", "+uneval(this.lineNumber)+" )"}
// node
function d(){var a=require("util");return"Markdown.mk_block( "+a.inspect(this.toString())+", "+a.inspect(this.trailing)+", "+a.inspect(this.lineNumber)+" )"}function e(a){for(var b=0,c=-1;-1!==(c=a.indexOf("\n",c+1));)b++;return b}
// Meta Helper/generator method for em and strong handling
function f(a,b){function c(a){this.len_after=a,this.name="close_"+b}var d=a+"_state",e="strong"==a?"em_state":"strong_state";return function(f,g){if(this[d][0]==b)
// "Consume" everything to go back to the recrusion in the else-block below
// Most recent em is of this type
//D:this.debug("closing", md);
return this[d].shift(),[f.length,new c(f.length-b.length)];
// Store a clone of the em/strong states
var h=this[e].slice(),i=this[d].slice();this[d].unshift(b);
//D:this.debug_indent += "  ";
// Recurse
var j=this.processInline(f.substr(b.length)),k=j[j.length-1];this[d].shift();if(k instanceof c){j.pop();
// We matched! Huzzah.
var l=f.length-k.len_after;return[l,[a].concat(j)]}
// We can't reuse the processed result as it could have wrong parsing contexts in it.
// Restore the state of the other kind. We might have mistakenly closed it.
return this[e]=h,this[d]=i,[b.length,b]}}function g(a){for(var b=a.split(""),c=[""],d=!1;b.length;){var e=b.shift();switch(e){case" ":
// if we're in a quoted section, keep it
d?c[c.length-1]+=e:c.push("");break;case"'":case'"':
// reverse the quotes and move straight on
d=!d;break;case"\\":
// shift off the next letter to be used straight away.
// it was escaped so we'll keep it whatever it is
e=b.shift();default:c[c.length-1]+=e}}return c}function h(a){return q(a)&&a.length>1&&"object"==typeof a[1]&&!q(a[1])?a[1]:void 0}function i(a){return a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function j(a){
// basic case
if("string"==typeof a)return i(a);var b=a.shift(),c={},d=[];for(!a.length||"object"!=typeof a[0]||a[0]instanceof Array||(c=a.shift());a.length;)d.push(j(a.shift()));var e="";for(var f in c)e+=" "+f+'="'+i(c[f])+'"';
// be careful about adding whitespace here for inline elements
// be careful about adding whitespace here for inline elements
return"img"==b||"br"==b||"hr"==b?"<"+b+e+"/>":"<"+b+e+">"+d.join("")+"</"+b+">"}function k(a,b,c){var d;c=c||{};
// shallow clone
var e=a.slice(0);"function"==typeof c.preprocessTreeNode&&(e=c.preprocessTreeNode(e,b));
// Clone attributes if they exist
var f=h(e);if(f){e[1]={};for(d in f)e[1][d]=f[d];f=e[1]}
// basic case
if("string"==typeof e)return e;
// convert this node
switch(e[0]){case"header":e[0]="h"+e[1].level,delete e[1].level;break;case"bulletlist":e[0]="ul";break;case"numberlist":e[0]="ol";break;case"listitem":e[0]="li";break;case"para":e[0]="p";break;case"markdown":e[0]="html",f&&delete f.references;break;case"code_block":e[0]="pre",d=f?2:1;var g=["code"];g.push.apply(g,e.splice(d,e.length-d)),e[d]=g;break;case"inlinecode":e[0]="code";break;case"img":e[1].src=e[1].href,delete e[1].href;break;case"linebreak":e[0]="br";break;case"link":e[0]="a";break;case"link_ref":e[0]="a";
// grab this ref and clean up the attribute node
var i=b[f.ref];
// if the reference exists, make the link
if(!i)return f.original;delete f.ref,
// add in the href and title, if present
f.href=i.href,i.title&&(f.title=i.title),
// get rid of the unneeded original text
delete f.original;break;case"img_ref":e[0]="img";
// grab this ref and clean up the attribute node
var i=b[f.ref];
// if the reference exists, make the link
if(!i)return f.original;delete f.ref,
// add in the href and title, if present
f.src=i.href,i.title&&(f.title=i.title),
// get rid of the unneeded original text
delete f.original}
// deal with the attribute node, if it exists
if(d=1,f){
// if there are keys, skip over it
for(var j in e[1]){d=2;break}
// if there aren't, remove it
1===d&&e.splice(d,1)}for(;d<e.length;++d)e[d]=k(e[d],b,c);return e}
// merges adjacent text nodes into a single node
function l(a){for(
// skip the tag name and attribute hash
var b=h(a)?2:1;b<a.length;)
// if it's a string check the next item too
"string"==typeof a[b]?b+1<a.length&&"string"==typeof a[b+1]?
// merge the second string into the first and remove it
a[b]+=a.splice(b+1,1)[0]:++b:(l(a[b]),++b)}/**
 *  class Markdown
 *
 *  Markdown processing in Javascript done right. We have very particular views
 *  on what constitutes 'right' which include:
 *
 *  - produces well-formed HTML (this means that em and strong nesting is
 *    important)
 *
 *  - has an intermediate representation to allow processing of parsed data (We
 *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).
 *
 *  - is easily extensible to add new dialects without having to rewrite the
 *    entire parsing mechanics
 *
 *  - has a good test suite
 *
 *  This implementation fulfills all of these (except that the test suite could
 *  do with expanding to automatically run all the fixtures from other Markdown
 *  implementations.)
 *
 *  ##### Intermediate Representation
 *
 *  *TODO* Talk about this :) Its JsonML, but document the node names we use.
 *
 *  [JsonML]: http://jsonml.org/ "JSON Markup Language"
 **/
var m=b.Markdown=function(a){switch(typeof a){case"undefined":this.dialect=m.dialects.Gruber;break;case"object":this.dialect=a;break;default:if(!(a in m.dialects))throw new Error("Unknown Markdown dialect '"+String(a)+"'");this.dialect=m.dialects[a]}this.em_state=[],this.strong_state=[],this.debug_indent=""};/**
 *  parse( markdown, [dialect] ) -> JsonML
 *  - markdown (String): markdown string to parse
 *  - dialect (String | Dialect): the dialect to use, defaults to gruber
 *
 *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.
 **/
b.parse=function(a,b){
// dialect will default if undefined
var c=new m(b);return c.toTree(a)},/**
 *  toHTML( markdown, [dialect]  ) -> String
 *  toHTML( md_tree ) -> String
 *  - markdown (String): markdown string to parse
 *  - md_tree (Markdown.JsonML): parsed markdown tree
 *
 *  Take markdown (either as a string or as a JsonML tree) and run it through
 *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.
 **/
b.toHTML=function(a,c,d){var e=b.toHTMLTree(a,c,d);return b.renderJsonML(e)},/**
 *  toHTMLTree( markdown, [dialect] ) -> JsonML
 *  toHTMLTree( md_tree ) -> JsonML
 *  - markdown (String): markdown string to parse
 *  - dialect (String | Dialect): the dialect to use, defaults to gruber
 *  - md_tree (Markdown.JsonML): parsed markdown tree
 *
 *  Turn markdown into HTML, represented as a JsonML tree. If a string is given
 *  to this function, it is first parsed into a markdown tree by calling
 *  [[parse]].
 **/
b.toHTMLTree=function(a,b,c){
// convert string input to an MD tree
"string"==typeof a&&(a=this.parse(a,b));
// Now convert the MD tree to an HTML tree
// remove references from the tree
var d=h(a),e={};d&&d.references&&(e=d.references);var f=k(a,e,c);return l(f),f};var n=m.mk_block=function(a,b,e){
// Be helpful for default case in tests.
1==arguments.length&&(b="\n\n");var f=new String(a);
// To make it clear its not just a string
return f.trailing=b,f.inspect=d,f.toSource=c,void 0!=e&&(f.lineNumber=e),f};
// Internal - split source into rough blocks
m.prototype.split_blocks=function(a,b){a=a.replace(/(\r\n|\n|\r)/g,"\n");
// [\s\S] matches _anything_ (newline or space)
// [^] is equivalent but doesn't work in IEs.
var c,d=/([\s\S]+?)($|\n#|\n(?:\s*\n|$)+)/g,f=[],g=1;for(null!=(c=/^(\s*\n)/.exec(a))&&(g+=e(c[0]),d.lastIndex=c[0].length);null!==(c=d.exec(a));)"\n#"==c[2]&&(c[2]="\n",d.lastIndex--),f.push(n(c[1],c[2],g)),g+=e(c[0]);return f},/**
 *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]
 *  - block (String): the block to process
 *  - next (Array): the following blocks
 *
 * Process `block` and return an array of JsonML nodes representing `block`.
 *
 * It does this by asking each block level function in the dialect to process
 * the block until one can. Succesful handling is indicated by returning an
 * array (with zero or more JsonML nodes), failure by a false value.
 *
 * Blocks handlers are responsible for calling [[Markdown#processInline]]
 * themselves as appropriate.
 *
 * If the blocks were split incorrectly or adjacent blocks need collapsing you
 * can adjust `next` in place using shift/splice etc.
 *
 * If any of this default behaviour is not right for the dialect, you can
 * define a `__call__` method on the dialect that will get invoked to handle
 * the block processing.
 */
m.prototype.processBlock=function(a,b){var c=this.dialect.block,d=c.__order__;if("__call__"in c)return c.__call__.call(this,a,b);for(var e=0;e<d.length;e++){
//D:this.debug( "Testing", ord[i] );
var f=c[d[e]].call(this,a,b);if(f)
//D:this.debug( "" );
//D:this.debug("  matched");
return(!q(f)||f.length>0&&!q(f[0]))&&this.debug(d[e],"didn't return a proper array"),f}
// Uhoh! no match! Should we throw an error?
return[]},m.prototype.processInline=function(a){return this.dialect.inline.__call__.call(this,String(a))},/**
 *  Markdown#toTree( source ) -> JsonML
 *  - source (String): markdown source to parse
 *
 *  Parse `source` into a JsonML tree representing the markdown document.
 **/
// custom_tree means set this.tree to `custom_tree` and restore old value on return
m.prototype.toTree=function(a,b){var c=a instanceof Array?a:this.split_blocks(a),d=this.tree;try{for(this.tree=b||this.tree||["markdown"];c.length;){var e=this.processBlock(c.shift(),c);
// Reference blocks and the like won't return any content
e.length&&this.tree.push.apply(this.tree,e)}return this.tree}finally{b&&(this.tree=d)}},
// Noop by default
m.prototype.debug=function(){var a=Array.prototype.slice.call(arguments);a.unshift(this.debug_indent),"undefined"!=typeof print&&print.apply(print,a),"undefined"!=typeof console&&"undefined"!=typeof console.log&&console.log.apply(null,a)},m.prototype.loop_re_over_block=function(a,b,c){for(
// Dont use /g regexps with this
var d,e=b.valueOf();e.length&&null!=(d=a.exec(e));)e=e.substr(d[0].length),c.call(this,d);return e},/**
 * Markdown.dialects
 *
 * Namespace of built-in dialects.
 **/
m.dialects={},/**
 * Markdown.dialects.Gruber
 *
 * The default dialect that follows the rules set out by John Gruber's
 * markdown.pl as closely as possible. Well actually we follow the behaviour of
 * that script which in some places is not exactly what the syntax web page
 * says.
 **/
m.dialects.Gruber={block:{atxHeader:function(a,b){var c=a.match(/^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/);if(c){var d=["header",{level:c[1].length}];return Array.prototype.push.apply(d,this.processInline(c[2])),c[0].length<a.length&&b.unshift(n(a.substr(c[0].length),a.trailing,a.lineNumber+2)),[d]}},setextHeader:function(a,b){var c=a.match(/^(.*)\n([-=])\2\2+(?:\n|$)/);if(c){var d="="===c[2]?1:2,e=["header",{level:d},c[1]];return c[0].length<a.length&&b.unshift(n(a.substr(c[0].length),a.trailing,a.lineNumber+2)),[e]}},code:function(a,b){
// |    Foo
// |bar
// should be a code block followed by a paragraph. Fun
//
// There might also be adjacent code block to merge.
var c=[],d=/^(?: {0,3}\t| {4})(.*)\n?/;
// 4 spaces + content
if(a.match(d)){a:for(;;){
// Now pull out the rest of the lines
var e=this.loop_re_over_block(d,a.valueOf(),function(a){c.push(a[1])});if(e.length){
// Case alluded to in first comment. push it back on as a new block
b.unshift(n(e,a.trailing));break a}if(!b.length)break a;
// Check the next block - it might be code too
if(!b[0].match(d))break a;
// Pull how how many blanks lines follow - minus two to account for .join
c.push(a.trailing.replace(/[^\n]/g,"").substring(2)),a=b.shift()}return[["code_block",c.join("\n")]]}},horizRule:function(a,b){
// this needs to find any hr in the block to handle abutting blocks
var c=a.match(/^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/);if(c){var d=[["hr"]];
// if there's a leading abutting block, process it
// if there's a trailing abutting block, stick it into next
return c[1]&&d.unshift.apply(d,this.processBlock(c[1],[])),c[3]&&b.unshift(n(c[3])),d}},
// There are two types of lists. Tight and loose. Tight lists have no whitespace
// between the items (and result in text just in the <li>) and loose lists,
// which have an empty line between list items, resulting in (one or more)
// paragraphs inside the <li>.
//
// There are all sorts weird edge cases about the original markdown.pl's
// handling of lists:
//
// * Nested lists are supposed to be indented by four chars per level. But
//   if they aren't, you can get a nested list by indenting by less than
//   four so long as the indent doesn't match an indent of an existing list
//   item in the 'nest stack'.
//
// * The type of the list (bullet or number) is controlled just by the
//    first item at the indent. Subsequent changes are ignored unless they
//    are for nested lists
//
lists:function(){
// TODO: Cache this regexp for certain depths.
// Create a regexp suitable for matching an li for a given stack depth
function a(a){
// m[1] = indent, m[2] = list_type
return new RegExp("(?:^("+i+"{0,"+a+"} {0,3})("+f+")\\s+)|(^"+i+"{0,"+(a-1)+"}[ ]{0,4})")}function b(a){return a.replace(/ {0,3}\t/g,"    ")}
// Add inline content `inline` to `li`. inline comes from processInline
// so is an array of content
function c(a,b,c,d){if(b)return void a.push(["para"].concat(c));
// Hmmm, should this be any block level element or just paras?
var e=a[a.length-1]instanceof Array&&"para"==a[a.length-1][0]?a[a.length-1]:a;
// If there is already some content in this list, add the new line in
d&&a.length>1&&c.unshift(d);for(var f=0;f<c.length;f++){var g=c[f],h="string"==typeof g;h&&e.length>1&&"string"==typeof e[e.length-1]?e[e.length-1]+=g:e.push(g)}}
// contained means have an indent greater than the current one. On
// *every* line in the block
function d(a,b){for(var c=new RegExp("^("+i+"{"+a+"}.*?\\n?)*$"),d=new RegExp("^"+i+"{"+a+"}","gm"),e=[];b.length>0&&c.exec(b[0]);){var f=b.shift(),
// Now remove that indent
g=f.replace(d,"");e.push(n(g,f.trailing,f.lineNumber))}return e}
// passed to stack.forEach to turn list items up the stack into paras
function e(a,b,c){var d=a.list,e=d[d.length-1];if(!(e[1]instanceof Array&&"para"==e[1][0]))if(b+1==c.length)
// Last stack frame
// Keep the same array, but replace the contents
e.push(["para"].concat(e.splice(1,e.length-1)));else{var f=e.pop();e.push(["para"].concat(e.splice(1,e.length-1)),f)}}
// Use a closure to hide a few variables.
var f="[*+-]|\\d+\\.",g=/[*+-]/,
// Capture leading indent as it matters for determining nested lists.
h=new RegExp("^( {0,3})("+f+")[ 	]+"),i="(?: {0,3}\\t| {4})";
// The matcher function
return function(f,i){function j(a){var b=g.exec(a[2])?["bulletlist"]:["numberlist"];return n.push({list:b,indent:a[1]}),b}var k=f.match(h);if(k){for(var l,m,n=[],// Stack of lists for nesting.
p=j(k),q=!1,r=[n[0].list];;){for(var s=f.split(/(?=\n)/),t="",u=0;u<s.length;u++){var v="",w=s[u].replace(/^\n/,function(a){return v=a,""}),x=a(n.length);
//print( "line:", uneval(l), "\nline match:", uneval(m) );
// We have a list item
if(k=w.match(x),void 0!==k[1]){
// Process the previous list item, if any
t.length&&(c(l,q,this.processInline(t),v),q=!1,t=""),k[1]=b(k[1]);var y=Math.floor(k[1].length/4)+1;
//print( "want:", wanted_depth, "stack:", stack.length);
if(y>n.length)p=j(k),l.push(p),l=p[1]=["listitem"];else{
// We aren't deep enough to be strictly a new level. This is
// where Md.pl goes nuts. If the indent matches a level in the
// stack, put it there, else put it one deeper then the
// wanted_depth deserves.
var z=!1;for(m=0;m<n.length;m++)if(n[m].indent==k[1]){p=n[m].list,n.splice(m+1,n.length-(m+1)),z=!0;break}z||(
//print("not found. l:", uneval(l));
y++,y<=n.length?(n.splice(y,n.length-y),
//print("Desired depth now", wanted_depth, "stack:", stack.length);
p=n[y-1].list):(p=j(k),l.push(p))),
//print( uneval(list), "last", list === stack[stack.length-1].list );
l=["listitem"],p.push(l)}// end depth of shenegains
v=""}
// Add content
w.length>k[0].length&&(t+=v+w.substr(k[0].length))}// tight_search
t.length&&(c(l,q,this.processInline(t),v),q=!1,t="");
// Look at the next block - we might have a loose list. Or an extra
// paragraph for the current li
var A=d(n.length,i);
// Deal with code blocks or properly nested lists
A.length>0&&(
// Make sure all listitems up the stack are paragraphs
o(n,e,this),l.push.apply(l,this.toTree(A,[])));var B=i[0]&&i[0].valueOf()||"";if(!B.match(h)&&!B.match(/^ /))break;f=i.shift();
// Check for an HR following a list: features/lists/hr_abutting
var C=this.dialect.block.horizRule(f,i);if(C){r.push.apply(r,C);break}
// Make sure all listitems up the stack are paragraphs
o(n,e,this),q=!0}// loose_search
return r}}}(),blockquote:function(a,b){if(a.match(/^>/m)){var c=[];
// separate out the leading abutting block, if any. I.e. in this case:
//
//  a
//  > b
//
if(">"!=a[0]){
// keep shifting lines until you find a crotchet
for(var d=a.split(/\n/),e=[],f=a.lineNumber;d.length&&">"!=d[0][0];)e.push(d.shift()),f++;var g=n(e.join("\n"),"\n",a.lineNumber);c.push.apply(c,this.processBlock(g,[])),
// reassemble new block of just block quotes!
a=n(d.join("\n"),a.trailing,f)}
// if the next block is also a blockquote merge it in
for(;b.length&&">"==b[0][0];){var i=b.shift();a=n(a+a.trailing+i,i.trailing,a.lineNumber)}
// Strip off the leading "> " and re-process as a block.
var j=a.replace(/^> ?/gm,""),k=(this.tree,this.toTree(j,["blockquote"])),l=h(k);
// If any link references were found get rid of them
// And then remove the attribute object if it's empty
return l&&l.references&&(delete l.references,r(l)&&k.splice(1,1)),c.push(k),c}},referenceDefn:function(a,b){var c=/^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;
// interesting matches are [ , ref_id, url, , title, title ]
if(a.match(c)){
// make an attribute node if it doesn't exist
h(this.tree)||this.tree.splice(1,0,{});var d=h(this.tree);
// make a references hash if it doesn't exist
void 0===d.references&&(d.references={});var e=this.loop_re_over_block(c,a,function(a){a[2]&&"<"==a[2][0]&&">"==a[2][a[2].length-1]&&(a[2]=a[2].substring(1,a[2].length-1));var b=d.references[a[1].toLowerCase()]={href:a[2]};void 0!==a[4]?b.title=a[4]:void 0!==a[5]&&(b.title=a[5])});return e.length&&b.unshift(n(e,a.trailing)),[]}},para:function(a,b){
// everything's a para!
return[["para"].concat(this.processInline(a))]}}},m.dialects.Gruber.inline={__oneElement__:function(a,b,c){var d,e;b=b||this.dialect.inline.__patterns__;var f=new RegExp("([\\s\\S]*?)("+(b.source||b)+")");if(d=f.exec(a),!d)
// Just boring text
return[a.length,a];if(d[1])
// Some un-interesting text matched. Return that first
return[d[1].length,d[1]];var e;
// Default for now to make dev easier. just slurp special and output it.
return d[2]in this.dialect.inline&&(e=this.dialect.inline[d[2]].call(this,a.substr(d.index),d,c||[])),e=e||[d[2].length,d[2]]},__call__:function(a,b){function c(a){
//D:self.debug("  adding output", uneval(x));
"string"==typeof a&&"string"==typeof e[e.length-1]?e[e.length-1]+=a:e.push(a)}for(var d,e=[];a.length>0;)d=this.dialect.inline.__oneElement__.call(this,a,b,e),a=a.substr(d.shift()),o(d,c);return e},
// These characters are intersting elsewhere, so have rules for them so that
// chunks of plain text blocks don't include them
"]":function(){},"}":function(){},__escape__:/^\\[\\`\*_{}\[\]()#\+.!\-]/,"\\":function(a){
// [ length of input processed, node/children to add... ]
// Only esacape: \ ` * _ { } [ ] ( ) # * + - . !
// [ length of input processed, node/children to add... ]
// Only esacape: \ ` * _ { } [ ] ( ) # * + - . !
return this.dialect.inline.__escape__.exec(a)?[2,a.charAt(1)]:[1,"\\"]},"![":function(a){
// Unlike images, alt text is plain text only. no other elements are
// allowed in there
// ![Alt text](/path/to/img.jpg "Optional title")
//      1          2            3       4         <--- captures
var b=a.match(/^!\[(.*?)\][ \t]*\([ \t]*([^")]*?)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/);if(b){b[2]&&"<"==b[2][0]&&">"==b[2][b[2].length-1]&&(b[2]=b[2].substring(1,b[2].length-1)),b[2]=this.dialect.inline.__call__.call(this,b[2],/\\/)[0];var c={alt:b[1],href:b[2]||""};return void 0!==b[4]&&(c.title=b[4]),[b[0].length,["img",c]]}return b=a.match(/^!\[(.*?)\][ \t]*\[(.*?)\]/),b?[b[0].length,["img_ref",{alt:b[1],ref:b[2].toLowerCase(),original:b[0]}]]:[2,"!["]},"[":function s(a){var b=String(a),c=m.DialectHelpers.inline_until_char.call(this,a.substr(1),"]");
// No closing ']' found. Just consume the [
if(!c)return[1,"["];var s,d,e=1+c[0],f=c[1];
// At this point the first [...] has been parsed. See what follows to find
// out which kind of link we are (reference or direct url)
a=a.substr(e);
// [link text](/path/to/img.jpg "Optional title")
//                 1            2       3         <--- captures
// This will capture up to the last paren in the block. We then pull
// back based on if there a matching ones in the url
//    ([here](/url/(test))
// The parens have to be balanced
var g=a.match(/^\s*\([ \t]*([^"']*)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/);if(g){var h=g[1];
// If there is a title we don't have to worry about parens in the url
if(e+=g[0].length,h&&"<"==h[0]&&">"==h[h.length-1]&&(h=h.substring(1,h.length-1)),!g[3])// One open that isn't in the capture
for(var i=1,j=0;j<h.length;j++)switch(h[j]){case"(":i++;break;case")":0==--i&&(e-=h.length-j,h=h.substring(0,j))}
// Process escapes only
return h=this.dialect.inline.__call__.call(this,h,/\\/)[0],d={href:h||""},void 0!==g[3]&&(d.title=g[3]),s=["link",d].concat(f),[e,s]}return g=a.match(/^\s*\[(.*?)\]/),g?(e+=g[0].length,d={ref:(g[1]||String(f)).toLowerCase(),original:b.substr(0,e)},s=["link_ref",d].concat(f),[e,s]):1==f.length&&"string"==typeof f[0]?(d={ref:f[0].toLowerCase(),original:b.substr(0,e)},s=["link_ref",d,f[0]],[e,s]):[1,"["]},"<":function(a){var b;return null!=(b=a.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/))?b[3]?[b[0].length,["link",{href:"mailto:"+b[3]},b[3]]]:"mailto"==b[2]?[b[0].length,["link",{href:b[1]},b[1].substr("mailto:".length)]]:[b[0].length,["link",{href:b[1]},b[1]]]:[1,"<"]},"`":function(a){
// Inline code block. as many backticks as you like to start it
// Always skip over the opening ticks.
var b=a.match(/(`+)(([\s\S]*?)\1)/);return b&&b[2]?[b[1].length+b[2].length,["inlinecode",b[3]]]:[1,"`"]},"  \n":function(a){return[3,["linebreak"]]}},m.dialects.Gruber.inline["**"]=f("strong","**"),m.dialects.Gruber.inline.__=f("strong","__"),m.dialects.Gruber.inline["*"]=f("em","*"),m.dialects.Gruber.inline._=f("em","_"),
// Build default order from insertion order.
m.buildBlockOrder=function(a){var b=[];for(var c in a)"__order__"!=c&&"__call__"!=c&&b.push(c);a.__order__=b},
// Build patterns for inline matcher
m.buildInlinePatterns=function(a){var b=[];for(var c in a)
// __foo__ is reserved and not a pattern
if(!c.match(/^__.*__$/)){var d=c.replace(/([\\.*+?|()\[\]{}])/g,"\\$1").replace(/\n/,"\\n");b.push(1==c.length?d:"(?:"+d+")")}b=b.join("|"),a.__patterns__=b;
//print("patterns:", uneval( patterns ) );
var e=a.__call__;a.__call__=function(a,c){return void 0!=c?e.call(this,a,c):e.call(this,a,b)}},m.DialectHelpers={},m.DialectHelpers.inline_until_char=function(a,b){for(var c=0,d=[];;){if(a.charAt(c)==b)
// Found the character we were looking for
return c++,[c,d];if(c>=a.length)
// No closing char found. Abort.
return null;var e=this.dialect.inline.__oneElement__.call(this,a.substr(c));c+=e[0],
// Add any returned nodes.
d.push.apply(d,e.slice(1))}},
// Helper function to make sub-classing a dialect easier
m.subclassDialect=function(a){function b(){}function c(){}return b.prototype=a.block,c.prototype=a.inline,{block:new b,inline:new c}},m.buildBlockOrder(m.dialects.Gruber.block),m.buildInlinePatterns(m.dialects.Gruber.inline),m.dialects.Maruku=m.subclassDialect(m.dialects.Gruber),m.dialects.Maruku.processMetaHash=function(a){for(var b=g(a),c={},d=0;d<b.length;++d)
// id: #foo
if(/^#/.test(b[d]))c.id=b[d].substring(1);else if(/^\./.test(b[d]))
// if class already exists, append the new one
c["class"]?c["class"]=c["class"]+b[d].replace(/./," "):c["class"]=b[d].substring(1);else if(/\=/.test(b[d])){var e=b[d].split(/\=/);c[e[0]]=e[1]}return c},m.dialects.Maruku.block.document_meta=function(a,b){
// we're only interested in the first block
if(!(a.lineNumber>1)&&a.match(/^(?:\w+:.*\n)*\w+:.*$/))
// document_meta blocks consist of one or more lines of `Key: Value\n`
{
// make an attribute node if it doesn't exist
h(this.tree)||this.tree.splice(1,0,{});var c=a.split(/\n/);for(p in c){var d=c[p].match(/(\w+):\s*(.*)$/),e=d[1].toLowerCase(),f=d[2];this.tree[1][e]=f}
// document_meta produces no content!
return[]}},m.dialects.Maruku.block.block_meta=function(b,c){
// check if the last line of the block is an meta hash
var d=b.match(/(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/);if(d){
// process the meta hash
var e,f=this.dialect.processMetaHash(d[2]);
// if we matched ^ then we need to apply meta to the previous block
if(""===d[1]){var g=this.tree[this.tree.length-1];
// if the node is a string (rather than JsonML), bail
if(e=h(g),"string"==typeof g)return;
// create the attribute hash if it doesn't exist
e||(e={},g.splice(1,0,e));
// add the attributes in
for(a in f)e[a]=f[a];
// return nothing so the meta hash is removed
return[]}
// pull the meta hash off the block and process what's left
var i=b.replace(/\n.*$/,""),j=this.processBlock(i,[]);
// get or make the attributes hash
e=h(j[0]),e||(e={},j[0].splice(1,0,e));
// attach the attributes to the block
for(a in f)e[a]=f[a];return j}},m.dialects.Maruku.block.definition_list=function(a,b){
// one or more terms followed by one or more definitions, in a single block
var c,d,e=/^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,f=["dl"];
// see if we're dealing with a tight or loose block
if(d=a.match(e)){for(
// pull subsequent tight DL blocks out of `next`
var g=[a];b.length&&e.exec(b[0]);)g.push(b.shift());for(var h=0;h<g.length;++h){var d=g[h].match(e),i=d[1].replace(/\n$/,"").split(/\n/),j=d[2].split(/\n:\s+/);
// print( uneval( m ) );
for(c=0;c<i.length;++c)f.push(["dt",i[c]]);for(c=0;c<j.length;++c)
// run inline processing over the definition
f.push(["dd"].concat(this.processInline(j[c].replace(/(\n)\s+/,"$1"))))}return[f]}},
// splits on unescaped instances of @ch. If @ch is not a character the result
// can be unpredictable
m.dialects.Maruku.block.table=function t(a,b){var c,d,e=function(a,b){b=b||"\\s",b.match(/^[\\|\[\]{}?*.+^$]$/)&&(b="\\"+b);for(var c,d=[],e=new RegExp("^((?:\\\\.|[^\\\\"+b+"])*)"+b+"(.*)");c=a.match(e);)d.push(c[1]),a=c[2];return d.push(a),d},f=/^ {0,3}\|(.+)\n {0,3}\|\s*([\-:]+[\-| :]*)\n((?:\s*\|.*(?:\n|$))*)(?=\n|$)/,
// find at least an unescaped pipe in each line
g=/^ {0,3}(\S(?:\\.|[^\\|])*\|.*)\n {0,3}([\-:]+\s*\|[\-| :]*)\n((?:(?:\\.|[^\\|])*\|.*(?:\n|$))*)(?=\n|$)/;if(d=a.match(f))
// remove leading pipes in contents
// (header and horizontal rule already have the leading pipe left out)
d[3]=d[3].replace(/^\s*\|/gm,"");else if(!(d=a.match(g)))return;var t=["table",["thead",["tr"]],["tbody"]];
// remove trailing pipes, then split on pipes
// (no escaped pipes are allowed in horizontal rule)
d[2]=d[2].replace(/\|\s*$/,"").split("|");
// process alignment
var h=[];for(o(d[2],function(a){a.match(/^\s*-+:\s*$/)?h.push({align:"right"}):a.match(/^\s*:-+\s*$/)?h.push({align:"left"}):a.match(/^\s*:-+:\s*$/)?h.push({align:"center"}):h.push({})}),
// now for the header, avoid escaped pipes
d[1]=e(d[1].replace(/\|\s*$/,""),"|"),c=0;c<d[1].length;c++)t[1][1].push(["th",h[c]||{}].concat(this.processInline(d[1][c].trim())));
// now for body contents
return o(d[3].replace(/\|\s*$/gm,"").split("\n"),function(a){var b=["tr"];for(a=e(a,"|"),c=0;c<a.length;c++)b.push(["td",h[c]||{}].concat(this.processInline(a[c].trim())));t[2].push(b)},this),[t]},m.dialects.Maruku.inline["{:"]=function(a,b,c){if(!c.length)return[2,"{:"];
// get the preceeding element
var d=c[c.length-1];if("string"==typeof d)return[2,"{:"];
// match a meta hash
var e=a.match(/^\{:\s*((?:\\\}|[^\}])*)\s*\}/);
// no match, false alarm
if(!e)return[2,"{:"];
// attach the attributes to the preceeding element
var f=this.dialect.processMetaHash(e[1]),g=h(d);g||(g={},d.splice(1,0,g));for(var i in f)g[i]=f[i];
// cut out the string and replace it with nothing
return[e[0].length,""]},m.dialects.Maruku.inline.__escape__=/^\\[\\`\*_{}\[\]()#\+.!\-|:]/,m.buildBlockOrder(m.dialects.Maruku.block),m.buildInlinePatterns(m.dialects.Maruku.inline);var o,q=Array.isArray||function(a){return"[object Array]"==Object.prototype.toString.call(a)};
// Don't mess with Array.prototype. Its not friendly
o=Array.prototype.forEach?function(a,b,c){return a.forEach(b,c)}:function(a,b,c){for(var d=0;d<a.length;d++)b.call(c||a,a[d],d,a)};var r=function(a){for(var b in a)if(hasOwnProperty.call(a,b))return!1;return!0};/**
 *  renderJsonML( jsonml[, options] ) -> String
 *  - jsonml (Array): JsonML array to render to XML
 *  - options (Object): options
 *
 *  Converts the given JsonML into well-formed XML.
 *
 *  The options currently understood are:
 *
 *  - root (Boolean): wether or not the root node should be included in the
 *    output, or just its children. The default `false` is to not include the
 *    root itself.
 */
b.renderJsonML=function(a,b){b=b||{},b.root=b.root||!1;var c=[];if(b.root)c.push(j(a));else for(a.shift(),// get rid of the tag
!a.length||"object"!=typeof a[0]||a[0]instanceof Array||a.shift();a.length;)c.push(j(a.shift()));return c.join("\n\n")}}(function(){return"undefined"==typeof exports?(window.markdown={},window.markdown):exports}());