/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011â€“2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
!function(a){/**
   * Simulate a mouse event based on a corresponding touch event
   * @param {Object} event A touch event
   * @param {String} simulatedType The corresponding mouse event
   */
function b(a,b,c){
// Ignore multi-touch events
if(!(a.originalEvent.touches.length>1)){c!==!1&&a.preventDefault();//ACE
var d=a.originalEvent.changedTouches[0],e=document.createEvent("MouseEvents");
// Initialize the simulated mouse event using the touch event's coordinates
e.initMouseEvent(b,// type
!0,// bubbles                    
!0,// cancelable                 
window,// view                       
1,// detail                     
d.screenX,// screenX                    
d.screenY,// screenY                    
d.clientX,// clientX                    
d.clientY,// clientY                    
!1,// ctrlKey                    
!1,// altKey                     
!1,// shiftKey                   
!1,// metaKey                    
0,// button                     
null),
// Dispatch the simulated event to the target element
a.target.dispatchEvent(e)}}
// Ignore browsers without touch support
if(
// Detect touch support
a.support.touch="ontouchend"in document,a.support.touch){var c,d=a.ui.mouse.prototype,e=d._mouseInit,f=d._mouseDestroy;/**
   * Handle the jQuery UI widget's touchstart events
   * @param {Object} event The widget element's touchstart event
   */
d._touchStart=function(a){var d=this;
// Ignore the event if another widget is already being handled
!c&&d._mouseCapture(a.originalEvent.changedTouches[0])&&(c=!0,d._touchMoved=!1,b(a,"mouseover",!1),b(a,"mousemove",!1),b(a,"mousedown",!1))},/**
   * Handle the jQuery UI widget's touchmove events
   * @param {Object} event The document's touchmove event
   */
d._touchMove=function(a){
// Ignore event if not handled
c&&(
// Interaction was not a click
this._touchMoved=!0,
// Simulate the mousemove event
b(a,"mousemove"))},/**
   * Handle the jQuery UI widget's touchend events
   * @param {Object} event The document's touchend event
   */
d._touchEnd=function(a){
// Ignore event if not handled
c&&(
// Simulate the mouseup event
b(a,"mouseup"),
// Simulate the mouseout event
b(a,"mouseout"),
// If the touch interaction did not move, it should trigger a click
this._touchMoved||
// Simulate the click event
b(a,"click"),
// Unset the flag to allow other widgets to inherit the touch event
c=!1)},/**
   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
   * This method extends the widget with bound touch event handlers that
   * translate touch events to mouse events and pass them to the widget's
   * original mouse event handling methods.
   */
d._mouseInit=function(){var b=this;
// Delegate the touch handlers to the widget's element
b.element.bind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),
// Call the original $.ui.mouse init method
e.call(b)},/**
   * Remove the touch event handlers
   */
d._mouseDestroy=function(){var b=this;
// Delegate the touch handlers to the widget's element
b.element.unbind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),
// Call the original $.ui.mouse destroy method
f.call(b)}}}(jQuery);