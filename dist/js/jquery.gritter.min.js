/*
 * Gritter for jQuery
 * http://www.boedesign.com/
 *
 * Copyright (c) 2012 Jordan Boesch
 * Dual licensed under the MIT and GPL licenses.
 *
 * Date: February 24, 2012
 * Version: 1.7.4
 */
!function(a){/**
	* Set it up as an object under the jQuery namespace
	*/
a.gritter={},/**
	* Set up global options that the user can over-ride
	*/
a.gritter.options={position:"",class_name:"",// could be set to 'gritter-light' to use white notifications
fade_in_speed:"medium",// how fast notifications fade in
fade_out_speed:1e3,// how fast the notices fade out
time:6e3},/**
	* Add a gritter notification to the screen
	* @see Gritter#add();
	*/
a.gritter.add=function(a){try{return b.add(a||{})}catch(c){var d="Gritter Error: "+c;"undefined"!=typeof console&&console.error?console.error(d,a):alert(d)}},/**
	* Remove a gritter notification from the screen
	* @see Gritter#removeSpecific();
	*/
a.gritter.remove=function(a,c){b.removeSpecific(a,c||{})},/**
	* Remove all notifications
	* @see Gritter#stop();
	*/
a.gritter.removeAll=function(a){b.stop(a||{})};/**
	* Big fat Gritter object
	* @constructor (not really since its object literal)
	*/
var b={
// Public - options to over-ride with $.gritter.options in "add"
position:"",fade_in_speed:"",fade_out_speed:"",time:"",
// Private - no touchy the private parts
_custom_timer:0,_item_count:0,_is_setup:0,_tpl_close:'<div class="gritter-close"></div>',_tpl_title:'<span class="gritter-title">[[title]]</span>',_tpl_item:'<div id="gritter-item-[[number]]" class="gritter-item-wrapper [[item_class]]" style="display:none"><div class="gritter-top"></div><div class="gritter-item">[[close]][[image]]<div class="[[class_name]]">[[title]]<p>[[text]]</p></div><div style="clear:both"></div></div><div class="gritter-bottom"></div></div>',_tpl_wrap:'<div id="gritter-notice-wrapper"></div>',/**
		* Add a gritter notification to the screen
		* @param {Object} params The object that contains all the options for drawing the notification
		* @return {Integer} The specific numeric id to that gritter notification
		*/
add:function(c){
// We might have some issues if we don't have a title or text!
if(
// Handle straight text
"string"==typeof c&&(c={text:c}),null===c.text)throw'You must supply "text" parameter.';
// Check the options and set them once
this._is_setup||this._runSetup();
// Basics
var d=c.title,e=c.text,f=c.image||"",g=c.sticky||!1,h=c.class_name||a.gritter.options.class_name,i=a.gritter.options.position,j=c.time||"";this._verifyWrapper(),this._item_count++;var k=this._item_count,l=this._tpl_item;
// Assign callbacks
a(["before_open","after_open","before_close","after_close"]).each(function(d,e){b["_"+e+"_"+k]=a.isFunction(c[e])?c[e]:function(){}}),
// Reset
this._custom_timer=0,
// A custom fade time set
j&&(this._custom_timer=j);var m=""!=f?'<img src="'+f+'" class="gritter-image" />':"",n=""!=f?"gritter-with-image":"gritter-without-image";
// If it's false, don't show another gritter message
if(
// String replacements on the template
d=d?this._str_replace("[[title]]",d,this._tpl_title):"",l=this._str_replace(["[[title]]","[[text]]","[[close]]","[[image]]","[[number]]","[[class_name]]","[[item_class]]"],[d,e,this._tpl_close,m,this._item_count,n,h],l),this["_before_open_"+k]()===!1)return!1;a("#gritter-notice-wrapper").addClass(i).append(l);var o=a("#gritter-item-"+this._item_count);
// Bind the hover/unhover states
// Clicking (X) makes the perdy thing close
return o.fadeIn(this.fade_in_speed,function(){b["_after_open_"+k](a(this))}),g||this._setFadeTimer(o,k),a(o).bind("mouseenter mouseleave",function(c){"mouseenter"==c.type?g||b._restoreItemIfFading(a(this),k):g||b._setFadeTimer(a(this),k),b._hoverState(a(this),c.type)}),a(o).find(".gritter-close").click(function(){b.removeSpecific(k,{},null,!0)}),k},/**
		* If we don't have any more gritter notifications, get rid of the wrapper using this check
		* @private
		* @param {Integer} unique_id The ID of the element that was just deleted, use it for a callback
		* @param {Object} e The jQuery element that we're going to perform the remove() action on
		* @param {Boolean} manual_close Did we close the gritter dialog with the (X) button
		*/
_countRemoveWrapper:function(b,c,d){
// Remove it then run the callback function
c.remove(),this["_after_close_"+b](c,d),
// Check if the wrapper is empty, if it is.. remove the wrapper
0==a(".gritter-item-wrapper").length&&a("#gritter-notice-wrapper").remove()},/**
		* Fade out an element after it's been on the screen for x amount of time
		* @private
		* @param {Object} e The jQuery element to get rid of
		* @param {Integer} unique_id The id of the element to remove
		* @param {Object} params An optional list of params to set fade speeds etc.
		* @param {Boolean} unbind_events Unbind the mouseenter/mouseleave events if they click (X)
		*/
_fade:function(a,c,d,e){var d=d||{},f="undefined"!=typeof d.fade?d.fade:!0,g=d.speed||this.fade_out_speed,h=e;this["_before_close_"+c](a,h),
// If this is true, then we are coming from clicking the (X)
e&&a.unbind("mouseenter mouseleave"),
// Fade it out or remove it
f?a.animate({opacity:0},g,function(){a.animate({height:0},300,function(){b._countRemoveWrapper(c,a,h)})}):this._countRemoveWrapper(c,a)},/**
		* Perform actions based on the type of bind (mouseenter, mouseleave) 
		* @private
		* @param {Object} e The jQuery element
		* @param {String} type The type of action we're performing: mouseenter or mouseleave
		*/
_hoverState:function(a,b){
// Change the border styles and add the (X) close button when you hover
"mouseenter"==b?(a.addClass("hover"),
// Show close button
a.find(".gritter-close").show()):(a.removeClass("hover"),
// Hide close button
a.find(".gritter-close").hide())},/**
		* Remove a specific notification based on an ID
		* @param {Integer} unique_id The ID used to delete a specific notification
		* @param {Object} params A set of options passed in to determine how to get rid of it
		* @param {Object} e The jQuery element that we're "fading" then removing
		* @param {Boolean} unbind_events If we clicked on the (X) we set this to true to unbind mouseenter/mouseleave
		*/
removeSpecific:function(b,c,d,e){if(!d)var d=a("#gritter-item-"+b);
// We set the fourth param to let the _fade function know to 
// unbind the "mouseleave" event.  Once you click (X) there's no going back!
this._fade(d,b,c||{},e)},/**
		* If the item is fading out and we hover over it, restore it!
		* @private
		* @param {Object} e The HTML element to remove
		* @param {Integer} unique_id The ID of the element
		*/
_restoreItemIfFading:function(a,b){clearTimeout(this["_int_id_"+b]),a.stop().css({opacity:"",height:""})},/**
		* Setup the global options - only once
		* @private
		*/
_runSetup:function(){for(opt in a.gritter.options)this[opt]=a.gritter.options[opt];this._is_setup=1},/**
		* Set the notification to fade out after a certain amount of time
		* @private
		* @param {Object} item The HTML element we're dealing with
		* @param {Integer} unique_id The ID of the element
		*/
_setFadeTimer:function(a,c){var d=this._custom_timer?this._custom_timer:this.time;this["_int_id_"+c]=setTimeout(function(){b._fade(a,c)},d)},/**
		* Bring everything to a halt
		* @param {Object} params A list of callback functions to pass when all notifications are removed
		*/
stop:function(b){
// callbacks (if passed)
var c=a.isFunction(b.before_close)?b.before_close:function(){},d=a.isFunction(b.after_close)?b.after_close:function(){},e=a("#gritter-notice-wrapper");c(e),e.fadeOut(function(){a(this).remove(),d()})},/**
		* An extremely handy PHP function ported to JS, works well for templating
		* @private
		* @param {String/Array} search A list of things to search for
		* @param {String/Array} replace A list of things to replace the searches with
		* @return {String} sa The output
		*/
_str_replace:function(a,b,c,d){var e=0,f=0,g="",h="",i=0,j=0,k=[].concat(a),l=[].concat(b),m=c,n=l instanceof Array,o=m instanceof Array;for(m=[].concat(m),d&&(this.window[d]=0),e=0,i=m.length;i>e;e++)if(""!==m[e])for(f=0,j=k.length;j>f;f++)g=m[e]+"",h=n?void 0!==l[f]?l[f]:"":l[0],m[e]=g.split(k[f]).join(h),d&&m[e]!==g&&(this.window[d]+=(g.length-m[e].length)/k[f].length);return o?m:m[0]},/**
		* A check to make sure we have something to wrap our notices with
		* @private
		*/
_verifyWrapper:function(){0==a("#gritter-notice-wrapper").length&&a("body").append(this._tpl_wrap)}}}(jQuery);