/**
 * Bootstrap Multiselect v0.9.8 (https://github.com/davidstutz/bootstrap-multiselect)
 * 
 * Copyright 2012 - 2014 David Stutz
 * 
 * Dual licensed under the BSD-3-Clause and the Apache License, Version 2.0.
 */
!function(a){"use strict";function b(a){return ko.isObservable(a)&&!(void 0===a.destroyAll)}function c(a,b){for(var c=0;c<a.length;++c)b(a[c])}/**
     * Constructor to create a new multiselect using the given select.
     * 
     * @param {jQuery} select
     * @param {Object} options
     * @returns {Multiselect}
     */
function d(b,c){this.$select=a(b),this.options=this.mergeOptions(a.extend({},c,this.$select.data())),
// Initialization.
// We have to clone to create a new reference.
this.originalOptions=this.$select.clone()[0].options,this.query="",this.searchTimeout=null,this.options.multiple="multiple"===this.$select.attr("multiple"),this.options.onChange=a.proxy(this.options.onChange,this),this.options.onDropdownShow=a.proxy(this.options.onDropdownShow,this),this.options.onDropdownHide=a.proxy(this.options.onDropdownHide,this),this.options.onDropdownShown=a.proxy(this.options.onDropdownShown,this),this.options.onDropdownHidden=a.proxy(this.options.onDropdownHidden,this),
// Build select all if enabled.
this.buildContainer(),this.buildButton(),this.buildDropdown(),this.buildSelectAll(),this.buildDropdownOptions(),this.buildFilter(),this.updateButtonText(),this.updateSelectAll(),this.options.disableIfEmpty&&a("option",this.$select).length<=0&&this.disable(),this.$select.hide().after(this.$container)}// jshint ;_;
"undefined"!=typeof ko&&ko.bindingHandlers&&!ko.bindingHandlers.multiselect&&(ko.bindingHandlers.multiselect={init:function(d,e,f,g,h){var i=f().selectedOptions,j=ko.utils.unwrapObservable(e());a(d).multiselect(j),b(i)&&(
// Set the initial selection state on the multiselect list.
a(d).multiselect("select",ko.utils.unwrapObservable(i)),
// Subscribe to the selectedOptions: ko.observableArray
i.subscribe(function(b){var e=[],f=[];c(b,function(a){switch(a.status){case"added":e.push(a.value);break;case"deleted":f.push(a.value)}}),e.length>0&&a(d).multiselect("select",e),f.length>0&&a(d).multiselect("deselect",f)},null,"arrayChange"))},update:function(c,d,e,f,g){var h=e().options,i=a(c).data("multiselect"),j=ko.utils.unwrapObservable(d());b(h)&&
// Subscribe to the options: ko.observableArray incase it changes later
h.subscribe(function(b){a(c).multiselect("rebuild")}),i?i.updateOriginalOptions():a(c).multiselect(j)}}),d.prototype={defaults:{/**
             * Default text function will either print 'None selected' in case no
             * option is selected or a list of the selected options up to a length
             * of 3 selected options.
             * 
             * @param {jQuery} options
             * @param {jQuery} select
             * @returns {String}
             */
buttonText:function(b,c){if(0===b.length)return this.nonSelectedText+' <b class="fa fa-caret-down"></b>';if(b.length==a("option",a(c)).length)return this.allSelectedText+' <b class="fa fa-caret-down"></b>';if(b.length>this.numberDisplayed)return b.length+" "+this.nSelectedText+' <b class="fa fa-caret-down"></b>';var d="";return b.each(function(){var b=void 0!==a(this).attr("label")?a(this).attr("label"):a(this).html();d+=b+", "}),d.substr(0,d.length-2)+' <b class="fa fa-caret-down"></b>'},/**
             * Updates the title of the button similar to the buttonText function.
             * 
             * @param {jQuery} options
             * @param {jQuery} select
             * @returns {@exp;selected@call;substr}
             */
buttonTitle:function(b,c){if(0===b.length)return this.nonSelectedText;var d="";return b.each(function(){d+=a(this).text()+", "}),d.substr(0,d.length-2)},/**
             * Create a label.
             * 
             * @param {jQuery} element
             * @returns {String}
             */
label:function(b){return a(b).attr("label")||a(b).html()},/**
             * Triggered on change of the multiselect.
             * 
             * Not triggered when selecting/deselecting options manually.
             * 
             * @param {jQuery} option
             * @param {Boolean} checked
             */
onChange:function(a,b){},/**
             * Triggered when the dropdown is shown.
             * 
             * @param {jQuery} event
             */
onDropdownShow:function(a){},/**
             * Triggered when the dropdown is hidden.
             * 
             * @param {jQuery} event
             */
onDropdownHide:function(a){},/**
             * Triggered after the dropdown is shown.
             * 
             * @param {jQuery} event
             */
onDropdownShown:function(a){},/**
             * Triggered after the dropdown is hidden.
             * 
             * @param {jQuery} event
             */
onDropdownHidden:function(a){},buttonClass:"btn btn-default",buttonWidth:"auto",buttonContainer:'<div class="btn-group" />',dropRight:!1,selectedClass:"active",
// Maximum height of the dropdown menu.
// If maximum height is exceeded a scrollbar will be displayed.
maxHeight:!1,checkboxName:!1,includeSelectAllOption:!1,includeSelectAllIfMoreThan:0,selectAllText:" Select all",selectAllValue:"multiselect-all",selectAllName:!1,enableFiltering:!1,enableCaseInsensitiveFiltering:!1,enableClickableOptGroups:!1,filterPlaceholder:"Search",
// possible options: 'text', 'value', 'both'
filterBehavior:"text",includeFilterClearBtn:!0,preventInputChangeEvent:!1,nonSelectedText:"None selected",nSelectedText:"selected",allSelectedText:"All selected",numberDisplayed:3,disableIfEmpty:!1,templates:{button:'<button type="button" class="multiselect dropdown-toggle" data-toggle="dropdown"></button>',ul:'<ul class="multiselect-container dropdown-menu"></ul>',filter:'<li class="multiselect-item filter"><div class="input-group"><span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',filterClearBtn:'<span class="input-group-btn"><button class="btn btn-default multiselect-clear-filter" type="button"><i class="glyphicon glyphicon-remove-circle"></i></button></span>',li:'<li><a href="javascript:void(0);"><label></label></a></li>',divider:'<li class="multiselect-item divider"></li>',liGroup:'<li class="multiselect-item multiselect-group"><label></label></li>'}},constructor:d,/**
         * Builds the container of the multiselect.
         */
buildContainer:function(){this.$container=a(this.options.buttonContainer),this.$container.on("show.bs.dropdown",this.options.onDropdownShow),this.$container.on("hide.bs.dropdown",this.options.onDropdownHide),this.$container.on("shown.bs.dropdown",this.options.onDropdownShown),this.$container.on("hidden.bs.dropdown",this.options.onDropdownHidden)},/**
         * Builds the button of the multiselect.
         */
buildButton:function(){this.$button=a(this.options.templates.button).addClass(this.options.buttonClass),
// Adopt active state.
this.$select.prop("disabled")?this.disable():this.enable(),
// Manually add button width if set.
this.options.buttonWidth&&"auto"!==this.options.buttonWidth&&(this.$button.css({width:this.options.buttonWidth}),this.$container.css({width:this.options.buttonWidth}));
// Keep the tab index from the select.
var b=this.$select.attr("tabindex");b&&this.$button.attr("tabindex",b),this.$container.prepend(this.$button)},/**
         * Builds the ul representing the dropdown menu.
         */
buildDropdown:function(){
// Build ul.
this.$ul=a(this.options.templates.ul),this.options.dropRight&&this.$ul.addClass("pull-right"),
// Set max height of dropdown menu to activate auto scrollbar.
this.options.maxHeight&&
// TODO: Add a class for this option to move the css declarations.
this.$ul.css({"max-height":this.options.maxHeight+"px","overflow-y":"auto","overflow-x":"hidden"}),this.$container.append(this.$ul)},/**
         * Build the dropdown options and binds all nessecary events.
         * 
         * Uses createDivider and createOptionValue to create the necessary options.
         */
buildDropdownOptions:function(){this.$select.children().each(a.proxy(function(b,c){var d=a(c),e=d.prop("tagName").toLowerCase();d.prop("value")!==this.options.selectAllValue&&("optgroup"===e?this.createOptgroup(c):"option"===e&&("divider"===d.data("role")?this.createDivider():this.createOptionValue(c)))},this)),
// Bind the change event on the dropdown elements.
a("li input",this.$ul).on("change",a.proxy(function(b){var c=a(b.target),d=c.prop("checked")||!1,e=c.val()===this.options.selectAllValue;
// Apply or unapply the configured selected class.
this.options.selectedClass&&(d?c.closest("li").addClass(this.options.selectedClass):c.closest("li").removeClass(this.options.selectedClass));
// Get the corresponding option.
var f=c.val(),g=this.getOptionByValue(f),h=a("option",this.$select).not(g),i=a("input",this.$container).not(c);return e&&(d?this.selectAll():this.deselectAll()),e||(d?(g.prop("selected",!0),this.options.multiple?
// Simply select additional option.
g.prop("selected",!0):(
// Unselect all other options and corresponding checkboxes.
this.options.selectedClass&&a(i).closest("li").removeClass(this.options.selectedClass),a(i).prop("checked",!1),h.prop("selected",!1),
// It's a single selection, so close.
this.$button.click()),"active"===this.options.selectedClass&&h.closest("a").css("outline","")):
// Unselect option.
g.prop("selected",!1)),this.$select.change(),this.updateButtonText(),this.updateSelectAll(),this.options.onChange(g,d),this.options.preventInputChangeEvent?!1:void 0},this)),a("li a",this.$ul).on("touchstart click",function(b){b.stopPropagation();var c=a(b.target);try{//ACE -- for IE8
if("Range"===document.getSelection().type){var d=a(this).find("input:first");d.prop("checked",!d.prop("checked")).trigger("change")}}catch(e){}if(b.shiftKey){var f=c.prop("checked")||!1;if(f){var g=c.closest("li").siblings('li[class="active"]:first'),h=c.closest("li").index(),i=g.index();h>i?c.closest("li").prevUntil(g).each(function(){a(this).find("input:first").prop("checked",!0).trigger("change")}):c.closest("li").nextUntil(g).each(function(){a(this).find("input:first").prop("checked",!0).trigger("change")})}}c.blur()}),
// Keyboard support.
this.$container.off("keydown.multiselect").on("keydown.multiselect",a.proxy(function(b){if(!a('input[type="text"]',this.$container).is(":focus"))if(9===b.keyCode&&this.$container.hasClass("open"))this.$button.click();else{var c=a(this.$container).find("li:not(.divider):not(.disabled) a").filter(":visible");if(!c.length)return;var d=c.index(c.filter(":focus"));
// Navigation up.
38===b.keyCode&&d>0?d--:40===b.keyCode&&d<c.length-1?d++:~d||(d=0);var e=c.eq(d);if(e.focus(),32===b.keyCode||13===b.keyCode){var f=e.find("input");f.prop("checked",!f.prop("checked")),f.change()}b.stopPropagation(),b.preventDefault()}},this)),this.options.enableClickableOptGroups&&this.options.multiple&&a("li.multiselect-group",this.$ul).on("click",a.proxy(function(b){b.stopPropagation();var c=a(b.target).parent(),d=c.nextUntil("li.multiselect-group"),e=!0,f=d.find("input");f.each(function(){e=e&&a(this).prop("checked")}),f.prop("checked",!e).trigger("change")},this))},/**
         * Create an option using the given select option.
         * 
         * @param {jQuery} element
         */
createOptionValue:function(b){var c=a(b);c.is(":selected")&&c.prop("selected",!0);
// Support the label attribute on options.
var d=this.options.label(b),e=c.val(),f=this.options.multiple?"checkbox":"radio",g=a(this.options.templates.li),h=a("label",g);h.addClass(f);var i=a("<input/>").attr("type",f).addClass("ace");//ACE
this.options.checkboxName&&i.attr("name",this.options.checkboxName),h.append(i),i.after('<span class="lbl" />');//ACE
var j=c.prop("selected")||!1;i.val(e),e===this.options.selectAllValue&&(g.addClass("multiselect-item multiselect-all"),i.parent().parent().addClass("multiselect-all")),h.append(" "+d),h.attr("title",c.attr("title")),this.$ul.append(g),c.is(":disabled")&&i.attr("disabled","disabled").prop("disabled",!0).closest("a").attr("tabindex","-1").closest("li").addClass("disabled"),i.prop("checked",j),j&&this.options.selectedClass&&i.closest("li").addClass(this.options.selectedClass)},/**
         * Creates a divider using the given select option.
         * 
         * @param {jQuery} element
         */
createDivider:function(b){var c=a(this.options.templates.divider);this.$ul.append(c)},/**
         * Creates an optgroup.
         * 
         * @param {jQuery} group
         */
createOptgroup:function(b){var c=a(b).prop("label"),d=a(this.options.templates.liGroup);a("label",d).text(c),this.options.enableClickableOptGroups&&d.addClass("multiselect-group-clickable"),this.$ul.append(d),a(b).is(":disabled")&&d.addClass("disabled"),
// Add the options of the group.
a("option",b).each(a.proxy(function(a,b){this.createOptionValue(b)},this))},/**
         * Build the selct all.
         * 
         * Checks if a select all has already been created.
         */
buildSelectAll:function(){"number"==typeof this.options.selectAllValue&&(this.options.selectAllValue=this.options.selectAllValue.toString());var b=this.hasSelectAll();if(!b&&this.options.includeSelectAllOption&&this.options.multiple&&a("option",this.$select).length>this.options.includeSelectAllIfMoreThan){
// Check whether to add a divider after the select all.
this.options.includeSelectAllDivider&&this.$ul.prepend(a(this.options.templates.divider));var c=a(this.options.templates.li);a("label",c).addClass("checkbox"),this.options.selectAllName?a("label",c).append('<input type="checkbox" name="'+this.options.selectAllName+'" />'):a("label",c).append('<input type="checkbox" />');var d=a("input",c);d.val(this.options.selectAllValue),c.addClass("multiselect-item multiselect-all"),d.parent().parent().addClass("multiselect-all"),a("label",c).append(" "+this.options.selectAllText),this.$ul.prepend(c),d.prop("checked",!1)}},/**
         * Builds the filter.
         */
buildFilter:function(){
// Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.
if(this.options.enableFiltering||this.options.enableCaseInsensitiveFiltering){var b=Math.max(this.options.enableFiltering,this.options.enableCaseInsensitiveFiltering);if(this.$select.find("option").length>=b){
// Adds optional filter clear button
if(this.$filter=a(this.options.templates.filter),a("input",this.$filter).attr("placeholder",this.options.filterPlaceholder),this.options.includeFilterClearBtn){var c=a(this.options.templates.filterClearBtn);c.on("click",a.proxy(function(b){clearTimeout(this.searchTimeout),this.$filter.find(".multiselect-search").val(""),a("li",this.$ul).show().removeClass("filter-hidden"),this.updateSelectAll()},this)),this.$filter.find(".input-group").append(c)}this.$ul.prepend(this.$filter),this.$filter.val(this.query).on("click",function(a){a.stopPropagation()}).on("input keydown",a.proxy(function(b){
// Cancel enter key default behaviour
13===b.which&&b.preventDefault(),
// This is useful to catch "keydown" events after the browser has updated the control.
clearTimeout(this.searchTimeout),this.searchTimeout=this.asyncFunction(a.proxy(function(){if(this.query!==b.target.value){this.query=b.target.value;var c,d;a.each(a("li",this.$ul),a.proxy(function(b,e){var f=a("input",e).val(),g=a("label",e).text(),h="";if("text"===this.options.filterBehavior?h=g:"value"===this.options.filterBehavior?h=f:"both"===this.options.filterBehavior&&(h=g+"\n"+f),f!==this.options.selectAllValue&&g){
// By default lets assume that element is not
// interesting for this search.
var i=!1;this.options.enableCaseInsensitiveFiltering&&h.toLowerCase().indexOf(this.query.toLowerCase())>-1?i=!0:h.indexOf(this.query)>-1&&(i=!0),
// Toggle current element (group or group item) according to showElement boolean.
a(e).toggle(i).toggleClass("filter-hidden",!i),
// Differentiate groups and group items.
a(e).hasClass("multiselect-group")?(c=e,d=i):(
// Show group name when at least one of its items is visible.
i&&a(c).show().removeClass("filter-hidden"),
// Show all group items when group name satisfies filter.
!i&&d&&a(e).show().removeClass("filter-hidden"))}},this))}this.updateSelectAll()},this),300,this)},this))}}},/**
         * Unbinds the whole plugin.
         */
destroy:function(){this.$container.remove(),this.$select.show(),this.$select.data("multiselect",null)},/**
         * Refreshs the multiselect based on the selected options of the select.
         */
refresh:function(){a("option",this.$select).each(a.proxy(function(b,c){var d=a("li input",this.$ul).filter(function(){return a(this).val()===a(c).val()});a(c).is(":selected")?(d.prop("checked",!0),this.options.selectedClass&&d.closest("li").addClass(this.options.selectedClass)):(d.prop("checked",!1),this.options.selectedClass&&d.closest("li").removeClass(this.options.selectedClass)),a(c).is(":disabled")?d.attr("disabled","disabled").prop("disabled",!0).closest("li").addClass("disabled"):d.prop("disabled",!1).closest("li").removeClass("disabled")},this)),this.updateButtonText(),this.updateSelectAll()},/**
         * Select all options of the given values.
         * 
         * If triggerOnChange is set to true, the on change event is triggered if
         * and only if one value is passed.
         * 
         * @param {Array} selectValues
         * @param {Boolean} triggerOnChange
         */
select:function(b,c){a.isArray(b)||(b=[b]);for(var d=0;d<b.length;d++){var e=b[d];if(null!==e&&void 0!==e){var f=this.getOptionByValue(e),g=this.getInputByValue(e);void 0!==f&&void 0!==g&&(this.options.multiple||this.deselectAll(!1),this.options.selectedClass&&g.closest("li").addClass(this.options.selectedClass),g.prop("checked",!0),f.prop("selected",!0))}}this.updateButtonText(),this.updateSelectAll(),c&&1===b.length&&this.options.onChange(f,!0)},/**
         * Clears all selected items.
         */
clearSelection:function(){this.deselectAll(!1),this.updateButtonText(),this.updateSelectAll()},/**
         * Deselects all options of the given values.
         * 
         * If triggerOnChange is set to true, the on change event is triggered, if
         * and only if one value is passed.
         * 
         * @param {Array} deselectValues
         * @param {Boolean} triggerOnChange
         */
deselect:function(b,c){a.isArray(b)||(b=[b]);for(var d=0;d<b.length;d++){var e=b[d];if(null!==e&&void 0!==e){var f=this.getOptionByValue(e),g=this.getInputByValue(e);void 0!==f&&void 0!==g&&(this.options.selectedClass&&g.closest("li").removeClass(this.options.selectedClass),g.prop("checked",!1),f.prop("selected",!1))}}this.updateButtonText(),this.updateSelectAll(),c&&1===b.length&&this.options.onChange(f,!1)},/**
         * Selects all enabled & visible options.
         *
         * If justVisible is true or not specified, only visible options are selected.
         *
         * @param {Boolean} justVisible
         */
selectAll:function(b){var b="undefined"==typeof b?!0:b,c=a("li input[type='checkbox']:enabled",this.$ul),d=c.filter(":visible"),e=c.length,f=d.length;if(b?(d.prop("checked",!0),a("li:not(.divider):not(.disabled)",this.$ul).filter(":visible").addClass(this.options.selectedClass)):(c.prop("checked",!0),a("li:not(.divider):not(.disabled)",this.$ul).addClass(this.options.selectedClass)),e===f||b===!1)a("option:enabled",this.$select).prop("selected",!0);else{var g=d.map(function(){return a(this).val()}).get();a("option:enabled",this.$select).filter(function(b){return-1!==a.inArray(a(this).val(),g)}).prop("selected",!0)}},/**
         * Deselects all options.
         * 
         * If justVisible is true or not specified, only visible options are deselected.
         * 
         * @param {Boolean} justVisible
         */
deselectAll:function(b){var b="undefined"==typeof b?!0:b;if(b){var c=a("li input[type='checkbox']:enabled",this.$ul).filter(":visible");c.prop("checked",!1);var d=c.map(function(){return a(this).val()}).get();a("option:enabled",this.$select).filter(function(b){return-1!==a.inArray(a(this).val(),d)}).prop("selected",!1),this.options.selectedClass&&a("li:not(.divider):not(.disabled)",this.$ul).filter(":visible").removeClass(this.options.selectedClass)}else a("li input[type='checkbox']:enabled",this.$ul).prop("checked",!1),a("option:enabled",this.$select).prop("selected",!1),this.options.selectedClass&&a("li:not(.divider):not(.disabled)",this.$ul).removeClass(this.options.selectedClass)},/**
         * Rebuild the plugin.
         * 
         * Rebuilds the dropdown, the filter and the select all option.
         */
rebuild:function(){this.$ul.html(""),
// Important to distinguish between radios and checkboxes.
this.options.multiple="multiple"===this.$select.attr("multiple"),this.buildSelectAll(),this.buildDropdownOptions(),this.buildFilter(),this.updateButtonText(),this.updateSelectAll(),this.options.disableIfEmpty&&a("option",this.$select).length<=0&&this.disable(),this.options.dropRight&&this.$ul.addClass("pull-right")},/**
         * The provided data will be used to build the dropdown.
         */
dataprovider:function(b){var d="",e=0,f=a("");// create empty jQuery array
a.each(b,function(b,g){var h;a.isArray(g.children)?(// create optiongroup tag
e++,h=a("<optgroup/>").attr({label:g.label||"Group "+e}),c(g.children,function(b){h.append(a("<option/>").attr({value:b.value,label:b.label||b.value,title:b.title,selected:!!b.selected}))}),d+="</optgroup>"):// create option tag
h=a("<option/>").attr({value:g.value,label:g.label||g.value,title:g.title,selected:!!g.selected}),f=f.add(h)}),this.$select.empty().append(f),this.rebuild()},/**
         * Enable the multiselect.
         */
enable:function(){this.$select.prop("disabled",!1),this.$button.prop("disabled",!1).removeClass("disabled")},/**
         * Disable the multiselect.
         */
disable:function(){this.$select.prop("disabled",!0),this.$button.prop("disabled",!0).addClass("disabled")},/**
         * Set the options.
         * 
         * @param {Array} options
         */
setOptions:function(a){this.options=this.mergeOptions(a)},/**
         * Merges the given options with the default options.
         * 
         * @param {Array} options
         * @returns {Array}
         */
mergeOptions:function(b){return a.extend(!0,{},this.defaults,b)},/**
         * Checks whether a select all checkbox is present.
         * 
         * @returns {Boolean}
         */
hasSelectAll:function(){return a("li."+this.options.selectAllValue,this.$ul).length>0},/**
         * Updates the select all checkbox based on the currently displayed and selected checkboxes.
         */
updateSelectAll:function(){if(this.hasSelectAll()){var b=a("li:not(.multiselect-item):not(.filter-hidden) input:enabled",this.$ul),c=b.length,d=b.filter(":checked").length,e=a("li."+this.options.selectAllValue,this.$ul),f=e.find("input");d>0&&d===c?(f.prop("checked",!0),e.addClass(this.options.selectedClass)):(f.prop("checked",!1),e.removeClass(this.options.selectedClass))}},/**
         * Update the button text and its title based on the currently selected options.
         */
updateButtonText:function(){var b=this.getSelected();
// First update the displayed button text.
a(".multiselect",this.$container).html(this.options.buttonText(b,this.$select)),
// Now update the title attribute of the button.
a(".multiselect",this.$container).attr("title",this.options.buttonTitle(b,this.$select))},/**
         * Get all selected options.
         * 
         * @returns {jQUery}
         */
getSelected:function(){return a("option",this.$select).filter(":selected")},/**
         * Gets a select option by its value.
         * 
         * @param {String} value
         * @returns {jQuery}
         */
getOptionByValue:function(b){for(var c=a("option",this.$select),d=b.toString(),e=0;e<c.length;e+=1){var f=c[e];if(f.value===d)return a(f)}},/**
         * Get the input (radio/checkbox) by its value.
         * 
         * @param {String} value
         * @returns {jQuery}
         */
getInputByValue:function(b){for(var c=a("li input",this.$ul),d=b.toString(),e=0;e<c.length;e+=1){var f=c[e];if(f.value===d)return a(f)}},/**
         * Used for knockout integration.
         */
updateOriginalOptions:function(){this.originalOptions=this.$select.clone()[0].options},asyncFunction:function(a,b,c){var d=Array.prototype.slice.call(arguments,3);return setTimeout(function(){a.apply(c||window,d)},b)}},a.fn.multiselect=function(b,c,e){return this.each(function(){var f=a(this).data("multiselect"),g="object"==typeof b&&b;
// Initialize the multiselect.
f||(f=new d(this,g),a(this).data("multiselect",f)),
// Call multiselect method.
"string"==typeof b&&(f[b](c,e),"destroy"===b&&a(this).data("multiselect",!1))})},a.fn.multiselect.Constructor=d,a(function(){a("select[data-role=multiselect]").multiselect()})}(window.jQuery);